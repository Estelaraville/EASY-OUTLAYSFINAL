<!doctype html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <!-- Links -->
    
    <link rel="stylesheet" href="/cssEasy/style.css">
    <script src="https://kit.fontawesome.com/1cf0fc1f6f.js" crossorigin="anonymous"></script>
    <title>EASY OUTLAYS</title>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark nav-bg">
        <div class="container-fluid">
            <i class="fas fa-wallet text-white fs-1 me-2"></i>
            <a class="navbar-brand text-white fs-1" href="#">EASY OUTLAYS</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link text-white fs-5" aria-current="page" href="/balance"><i
                                class="fas fa-chart-line me-2"></i>Balance</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white fs-5" href="/categorias"><i
                                class="fas fa-tag me-2"></i>Categorías</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white fs-5" href="/reporte"><i
                                class="fas fa-chart-pie me-2"></i>Reporte</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <section id="newOp" class="">
        <div class="container col-lg-6 col-11 bg-light border border-3 rounded-3 mt-5">
            <h2 class="mt-3">Nueva Operación</h2>
            <form id="newOp-form" action="">
            <div class="my-3">
                <label class="label fw-bold"> Descripción:</label>
                <div class="input-group input-group-sm">
                    <input id="newOp-description" type="text" class="form-control" aria-label="Sizing example input"
                        aria-describedby="inputGroup-sizing-sm">
                </div>
            </div>
            <div class="my-3">
                <label class="label fw-bold"> Monto:</label>
                <div class="input-group input-group-sm">
                    <input id="newOp-amount" type="text" class="form-control" aria-label="Sizing example input"
                        aria-describedby="inputGroup-sizing-sm">
                </div>
            </div>
            <div class="mt-3">
                <label class="label fw-bold"> Tipo:</label>
                <select id="newOp-type" required class="form-select form-select-sm" aria-label=".form-select-sm example">
                    <option value="Nada">---</option>
                    <option value="Gasto">Gasto</option>
                    <option value="Ganancia">Ingreso</option>
                </select>
            </div>

            <div id="tipoIngreso" class="mt-3 d-none">
                <label class="label fw-bold"> Tipo de Ingreso:</label>
                <select id="newOp-ingreso" required class="form-select form-select-sm" aria-label=".form-select-sm example">
                    <% tiposIngresos.forEach(tipo => { %>
                        <option value="<%= tipo %>"><%= tipo %></option>
                    <% }); %>
                </select>
            </div>
            
            <div id="tipoGasto" class="mt-3 d-none">
                <label class="label fw-bold"> Tipo de Gasto:</label>
                <select id="newOp-gasto" required class="form-select form-select-sm" aria-label=".form-select-sm example">
                    <% tiposGastos.forEach(tipo => { %>
                        <option value="<%= tipo %>"><%= tipo %></option>
                    <% }); %>
                </select>
            </div>

            <div class="mt-3">
                <label class="label fw-bold"> Categoria:</label>
                <select id="newOp-category" required class="form-select form-select-sm" aria-label=".form-select-sm example">
                    
                </select>
            </div>
            <div class="mt-3">
                <label class="label fw-bold"> Fecha:</label>
                <input id="newOp-date" required type="date" class="input-group form-control" min="1980-01-01" max="2025-12-31">
            </div>
            <div class= "mt-5 mb-3 d-flex justify-content-end">
                <a href="/balance"><button id="newOp-cancelbtn" type="button" class="btn btn-bg-color-light me-3">Cancelar</button></a>
                <button id="submit-newOp" type="submit" class="btn btn-bg-color fw-bold">Agregar</button>
            </div>
        </form>
        </div>
    </section>
    <script> 
    
    var input = document.getElementById("newOp-amount");

// Agregar un escuchador de eventos para el evento 'keydown'
     input.addEventListener("keydown", function(event) {
    // Obtener el código de la tecla presionada
    var codigoTecla = event.which ? event.which : event.keyCode;

    // Permitir teclas especiales como la flecha arriba, abajo, etc.
    if (codigoTecla == 8 || codigoTecla == 9 || codigoTecla == 37 || codigoTecla == 39) {
        return true;
    }

    // Convertir el código de tecla a un carácter
    var caracter = String.fromCharCode(codigoTecla);

    // Verificar si el carácter es un número
    if (!/^\d+$/.test(caracter)) {
        event.preventDefault(); // Detener la acción predeterminada si no es un número
        return false;
    }

    return true;
});


    document.getElementById('newOp-description').addEventListener('input', function() {
    if (this.value.length > 30) {
        this.value = this.value.slice(0, 30); // Limitar la longitud a 30 caracteres
    }
});


var inputFecha = document.getElementById("newOp-date");

// Agregar un escuchador de eventos para el evento 'input'
inputFecha.addEventListener("input", function(event) {
    // Obtener la fecha ingresada
    var fechaIngresada = new Date(inputFecha.value);
    
    // Verificar si la fecha está dentro del rango especificado (1980 - 2025)
    var añoMinimo = 1980;
    var añoMaximo = 2025;
    if (fechaIngresada.getFullYear() < añoMinimo || fechaIngresada.getFullYear() > añoMaximo) {
        // Mostrar un mensaje de error o tomar alguna acción adicional, por ejemplo:
        inputFecha.setCustomValidity("La fecha debe estar entre 1980 y 2025");
    } else {
        // La fecha está dentro del rango, por lo que no hay error
        inputFecha.setCustomValidity("");
    }
});

document.addEventListener('DOMContentLoaded', function () {
    // Obtener las categorías del Local Storage
    let categories = JSON.parse(localStorage.getItem('categories')) || [];

    // Obtener el elemento select
    let selectElement = document.getElementById('newOp-category');

    // Agregar las opciones al select
    categories.forEach(function (category) {
        let option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        selectElement.appendChild(option);
    });
});



//GUARDAR OPERACIONES EN LA BASE DE DATOS Y EN SUS TABLAS CORRESPONDIENTES
document.getElementById('newOp-form').addEventListener('submit', function (event) {

    event.preventDefault();

        const descripcion = document.getElementById('newOp-description').value;
        const monto = document.getElementById('newOp-amount').value;
        const tipo = document.getElementById('newOp-type').value;
        const categoria = document.getElementById('newOp-category').value;
        const fecha = document.getElementById('newOp-date').value;

        let tipoGI;

        if (tipo === 'Gasto') {
        tipoGI = document.getElementById('newOp-gasto').value;
        } else {
        tipoGI = document.getElementById('newOp-ingreso').value;
        }

        if (tipo === 'Nada') {
            alert('Por favor seleccione un tipo válido.');
            return;
        }

        const data = {
            descripcion,
            monto,
            tipo,
            categoria,
            fecha,
            tipoGI
        };

        fetch('/guardar_operacion', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Operación guardada exitosamente.');
                window.location.href = '/balance'; // Redirigir al balance después de guardar
            } else {
                alert('Error al guardar la operación.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error al guardar la operación.');
        });
    });


    document.getElementById('newOp-type').addEventListener('change', function() {
    const tipoSeleccionado = this.value;
    
    // Ocultar ambos selectores de tipo
    document.getElementById('tipoGasto').classList.add('d-none');
    document.getElementById('tipoIngreso').classList.add('d-none');
    
    // Mostrar el selector correspondiente según la selección del usuario
    if (tipoSeleccionado === 'Gasto') {
        document.getElementById('tipoGasto').classList.remove('d-none');
    } else{
        document.getElementById('tipoIngreso').classList.remove('d-none');
    }
});
    </script>
</body>
</html>